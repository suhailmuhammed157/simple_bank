// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: verify_email.sql

package db_source

import (
	"context"
	"database/sql"
	"time"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails (
  username, email, secret_code
) VALUES (
  $1, $2, $3
)
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, createVerifyEmail, arg.Username, arg.Email, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyEmail = `-- name: GetVerifyEmail :one
SELECT 
    verify_emails.id, verify_emails.username, verify_emails.email, verify_emails.secret_code, verify_emails.is_used, verify_emails.created_at, verify_emails.expired_at, 
    users.is_user_verified
FROM verify_emails
LEFT JOIN users ON users.username = verify_emails.username
WHERE verify_emails.secret_code = $1
`

type GetVerifyEmailRow struct {
	ID             int64        `json:"id"`
	Username       string       `json:"username"`
	Email          string       `json:"email"`
	SecretCode     string       `json:"secret_code"`
	IsUsed         bool         `json:"is_used"`
	CreatedAt      time.Time    `json:"created_at"`
	ExpiredAt      time.Time    `json:"expired_at"`
	IsUserVerified sql.NullBool `json:"is_user_verified"`
}

func (q *Queries) GetVerifyEmail(ctx context.Context, secretCode string) (GetVerifyEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getVerifyEmail, secretCode)
	var i GetVerifyEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
		&i.IsUserVerified,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE verify_emails
SET
  is_used = $1
WHERE 
  id = $2
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailParams struct {
	IsUsed bool  `json:"is_used"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, updateVerifyEmail, arg.IsUsed, arg.ID)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
